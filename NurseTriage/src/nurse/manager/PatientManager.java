package nurse.manager;

/*
 * A representation of patient manager
 * @author Zhuo Gu, Guanfeng Dong
 */

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Serializable;
import java.text.ParseException;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

import nurse.Patient;
import nurse.Symptom;
import nurse.VitalSign;

public class PatientManager implements Serializable {
	private Map<String,Patient> patients; // patients by their health card number

	/**
	 * This is generated by IDE
	 */
	private static final long serialVersionUID = -8196664697780851184L;
	
    /**
     * Constructs a new PatientManager that manages a collection of Patients
     * stored in directory dir in file named fileName.
     * @param dir the directory in which the data file is stored
     * @param fileName the data file containing Person information
     * @throws IOException
     * @throws ParseException 
     */
    public PatientManager(File dir, String fileName) throws IOException, ParseException {
        this.patients = new HashMap<String,Patient>();
        
        // read the patient list using stored data, if it exists.
        File file = new File(dir, fileName);
        if (file.exists()) {
            this.readFile(file.getPath());
        } else {
            file.createNewFile();
        }
    }
       
    
    /**
     * Adds patient to this PatientManager.
     * @param patient a Patient to be added.
     */
    public void add(Patient patient) {
        patients.put(patient.getHealthCardNumber(), patient);
    }

    /**
     * Gets the Patients managed by this PatientManager.
     * @return a map of Patient health card number to Patient object
     */
    public Map<String,Patient> getPatients() {
        return patients;
    }
    
    @Override
    public String toString() {
        return "PatientManager [patient =" + patients + "]";
    }

    /**
     * Populates the map of patients from the file at path filePath
     * @param filePath the filepath of the data file
     * @throws FileNotFoundException
     */
	public void readFile(String filePath) throws FileNotFoundException, ParseException {
		Scanner scanner = new Scanner(new FileInputStream(filePath));
        String [] record;
        
        while(scanner.hasNextLine()) {
        	record = scanner.nextLine().split(",");
        	String name = record[0];
        	String birthday = record[1];
        	String healthCardNumber = record[2];
        	String arrivalTime = record[3];
        	String hasSeenDoctor = record[4];
        	String treatedTime = record[5];
        	
        	Patient patient = new Patient(name, birthday, healthCardNumber, arrivalTime);
        	if (hasSeenDoctor == "true") {
        		patient.setHasSeenDoctor();
        		patient.setTreatedTime(treatedTime);
        	}
        	int numberOfVitalSigns = Integer.getInteger(record[6]);
        	
        	for (int i = 0; i < numberOfVitalSigns; i++) {
        		VitalSign vs = new VitalSign(record[7+i]);
        		patient.getVitalSigns().add(vs);
        	}
        	
        	int numberOfSymptoms = Integer.getInteger(record[7+numberOfVitalSigns]);
        	for (int i = 0; i < numberOfSymptoms; i++) {
        		Symptom s = Symptom.fromString(record[7+numberOfVitalSigns + i]);
        		patient.getSymptoms().add(s);
        	}
        	patients.put(healthCardNumber, patient);
        }
        
		scanner.close();
	}
	
	/**
     * Saves the Student objects to file outputStream.
     * @param outputStream the output stream to write the Student data to
     */
	
	public void writeFile(Map<String, Patient> patients, String fileName) {
		try {
			 @SuppressWarnings("resource")
			BufferedWriter output = new BufferedWriter(new FileWriter(fileName));
			
			for (Patient p : patients.values()) {
				output.write(p.toString() + "\n");
				} 
			} catch (IOException e) {
				e.printStackTrace();
			}
	}
}	